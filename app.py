import random
from copy import deepcopy

import streamlit as st

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ö–û–ù–°–¢–ê–ù–¢–´ ---
# –¶–µ–Ω—ã –Ω–∞ —Ç–æ–≤–∞—Ä—ã
GOODS_PRICES = {
    "–£–≥–æ–ª—å": 100,
    "–©–µ–±–µ–Ω—å": 80,
    "–ñ–µ–ª—Ç—ã–π": 80,
    "–ó–µ–ª–µ–Ω—ã–π": 90,
    "–°–∏–Ω–∏–π": 110,
    "–ú–µ—Ç–∞–ª–ª": 800,
}

# –†–µ–º–æ–Ω—Ç –∏ –∫—Ä–µ–¥–∏—Ç
REPAIR_LOCO = 400
REPAIR_WAGON = 300
CREDIT_GIVE = 3000
CREDIT_PAY = 4000

# –¶–µ–Ω—ã –Ω–∞ –ø–æ–∫—É–ø–∫—É –Ω–æ–≤—ã—Ö –≤–∞–≥–æ–Ω–æ–≤
WAGON_PRICES = {
    1: 3000,  # –ü–æ–ª—É–≤–∞–≥–æ–Ω
    2: 3000,  # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä
    3: 3000,  # –ü–æ–ª—É–≤–∞–≥–æ–Ω
    4: 3000,  # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä
    5: 5000  # –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞
}

# –û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–≥–æ–Ω–æ–≤
WAGON_INFO = {
    1: {"name": "–ü–æ–ª—É–≤–∞–≥–æ–Ω 1", "type": "gondola", "capacity": 6},
    2: {"name": "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 1", "type": "container", "capacity": 6},
    3: {"name": "–ü–æ–ª—É–≤–∞–≥–æ–Ω 2", "type": "gondola", "capacity": 6},
    4: {"name": "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 2", "type": "container", "capacity": 6},
    5: {"name": "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞", "type": "platform", "capacity": 3},
}

GOOD_COMPATIBILITY = {
    "–£–≥–æ–ª—å": "gondola",
    "–©–µ–±–µ–Ω—å": "gondola",
    "–ñ–µ–ª—Ç—ã–π": "container",
    "–ó–µ–ª–µ–Ω—ã–π": "container",
    "–°–∏–Ω–∏–π": "container",
    "–ú–µ—Ç–∞–ª–ª": "platform",
}

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –≤ –∏–≥—Ä–µ
CONTRACTS = [
    {"id": "P1", "origin": "A", "destination": "B", "max_rounds": 3, "goods_1": "–£–≥–æ–ª—å", "qty_1": 5, "goods_2": None,
     "qty_2": 0, "goods_3": None, "qty_3": 0},
    {"id": "P2", "origin": "A", "destination": "B", "max_rounds": 3, "goods_1": "–©–µ–±–µ–Ω—å", "qty_1": 6, "goods_2": None,
     "qty_2": 0, "goods_3": None, "qty_3": 0},
    {"id": "P3", "origin": "B", "destination": "A", "max_rounds": 3, "goods_1": "–ñ–µ–ª—Ç—ã–π", "qty_1": 6, "goods_2": None,
     "qty_2": 0, "goods_3": None, "qty_3": 0},
    {"id": "P4", "origin": "A", "destination": "B", "max_rounds": 3, "goods_1": "–°–∏–Ω–∏–π", "qty_1": 3, "goods_2": None,
     "qty_2": 0, "goods_3": None, "qty_3": 0},
    {"id": "P5", "origin": "B", "destination": "A", "max_rounds": 3, "goods_1": "–ó–µ–ª–µ–Ω—ã–π", "qty_1": 4, "goods_2": None,
     "qty_2": 0, "goods_3": None, "qty_3": 0},
    {"id": "P6", "origin": "B", "destination": "A", "max_rounds": 3, "goods_1": "–£–≥–æ–ª—å", "qty_1": 4, "goods_2": None,
     "qty_2": 0, "goods_3": None, "qty_3": 0},
    {"id": "P7", "origin": "A", "destination": "B", "max_rounds": 3, "goods_1": "–©–µ–±–µ–Ω—å", "qty_1": 5, "goods_2": None,
     "qty_2": 0, "goods_3": None, "qty_3": 0},
    {"id": "P8", "origin": "A", "destination": "B", "max_rounds": 3, "goods_1": "–£–≥–æ–ª—å", "qty_1": 2,
     "goods_2": "–ñ–µ–ª—Ç—ã–π", "qty_2": 3, "goods_3": None, "qty_3": 0},
    {"id": "M1", "origin": "A", "destination": "B", "max_rounds": 2, "goods_1": "–£–≥–æ–ª—å", "qty_1": 6,
     "goods_2": "–ñ–µ–ª—Ç—ã–π", "qty_2": 6, "goods_3": None, "qty_3": 0},
    {"id": "M2", "origin": "B", "destination": "A", "max_rounds": 2, "goods_1": "–©–µ–±–µ–Ω—å", "qty_1": 9,
     "goods_2": "–°–∏–Ω–∏–π", "qty_2": 3, "goods_3": None, "qty_3": 0},
    {"id": "M3", "origin": "A", "destination": "B", "max_rounds": 2, "goods_1": "–ó–µ–ª–µ–Ω—ã–π", "qty_1": 10, "goods_2": None,
     "qty_2": 0, "goods_3": None, "qty_3": 0},
    {"id": "M4", "origin": "A", "destination": "B", "max_rounds": 2, "goods_1": "–£–≥–æ–ª—å", "qty_1": 6,
     "goods_2": "–©–µ–±–µ–Ω—å", "qty_2": 4, "goods_3": None, "qty_3": 0},
    {"id": "M5", "origin": "B", "destination": "A", "max_rounds": 2, "goods_1": "–°–∏–Ω–∏–π", "qty_1": 6, "goods_2": None,
     "qty_2": 0, "goods_3": None, "qty_3": 0},
    {"id": "M6", "origin": "A", "destination": "B", "max_rounds": 2, "goods_1": "–£–≥–æ–ª—å", "qty_1": 10,
     "goods_2": "–ó–µ–ª–µ–Ω—ã–π", "qty_2": 4, "goods_3": None, "qty_3": 0},
    {"id": "M7", "origin": "B", "destination": "A", "max_rounds": 2, "goods_1": "–©–µ–±–µ–Ω—å", "qty_1": 12,
     "goods_2": "–ñ–µ–ª—Ç—ã–π", "qty_2": 6, "goods_3": None, "qty_3": 0},
    {"id": "M8", "origin": "A", "destination": "B", "max_rounds": 2, "goods_1": "–©–µ–±–µ–Ω—å", "qty_1": 6,
     "goods_2": "–ñ–µ–ª—Ç—ã–π", "qty_2": 6, "goods_3": None, "qty_3": 0},
    {"id": "S1", "origin": "A", "destination": "B", "max_rounds": 1, "goods_1": "–ú–µ—Ç–∞–ª–ª", "qty_1": 1,
     "goods_2": "–£–≥–æ–ª—å", "qty_2": 6, "goods_3": None, "qty_3": 0},
    {"id": "S2", "origin": "B", "destination": "A", "max_rounds": 1, "goods_1": "–ú–µ—Ç–∞–ª–ª", "qty_1": 2,
     "goods_2": "–©–µ–±–µ–Ω—å", "qty_2": 6, "goods_3": None, "qty_3": 0},
    {"id": "S3", "origin": "A", "destination": "B", "max_rounds": 1, "goods_1": "–ó–µ–ª–µ–Ω—ã–π", "qty_1": 6,
     "goods_2": "–°–∏–Ω–∏–π", "qty_2": 6, "goods_3": None, "qty_3": 0},
    {"id": "S4", "origin": "A", "destination": "B", "max_rounds": 1, "goods_1": "–ú–µ—Ç–∞–ª–ª", "qty_1": 2,
     "goods_2": "–ó–µ–ª–µ–Ω—ã–π", "qty_2": 4, "goods_3": "–©–µ–±–µ–Ω—å", "qty_3": 4},
]

# –ö–∞—Ä—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤
GOODS_HTML = {
    "–£–≥–æ–ª—å": '<span style="font-size:20px;">‚¨õ</span>', "–©–µ–±–µ–Ω—å": '<span style="font-size:20px; color:#888;">‚¨ú</span>',
    "–ñ–µ–ª—Ç—ã–π": '<span style="font-size:20px; color:#FFD700;">üü®</span>',
    "–ó–µ–ª–µ–Ω—ã–π": '<span style="font-size:20px; color:#228B22;">üü©</span>',
    "–°–∏–Ω–∏–π": '<span style="font-size:20px; color:#0066FF;">üü¶</span>',
    "–ú–µ—Ç–∞–ª–ª": '<span style="font-size:20px; color:#bbb;">‚¨ú</span>',
    None: '<span style="font-size:20px; color:#ccc;">‚ñ´Ô∏è</span>',
}
PLATFORM_EMPTY = '<span style="font-size:20px; color:#aaa;">‚ö™</span>'
PLATFORM_FULL = '<span style="font-size:20px; color:#000;">‚ö´</span>'


# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
def contract_price(contract):
    s = 0
    for g, q in [(contract["goods_1"], contract["qty_1"]), (contract["goods_2"], contract["qty_2"]),
                 (contract["goods_3"], contract["qty_3"])]:
        if g and q: s += GOODS_PRICES[g] * q
    return s


def get_wagon_fill_html(contents, capacity):  # –ê—Ä–≥—É–º–µ–Ω—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω —Å hp –Ω–∞ capacity
    html = ''
    for i in range(capacity):  # –ò—Å–ø–æ–ª—å–∑—É–µ–º capacity –Ω–∞–ø—Ä—è–º—É—é
        html += GOODS_HTML.get(contents[i]['good'] if i < len(contents) else None, GOODS_HTML[None])
    return html


def get_platform_fill_html(contents, capacity):  # –ê—Ä–≥—É–º–µ–Ω—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω —Å hp –Ω–∞ capacity
    html = ''
    for i in range(capacity):  # –ò—Å–ø–æ–ª—å–∑—É–µ–º capacity –Ω–∞–ø—Ä—è–º—É—é
        html += PLATFORM_FULL if i < len(contents) else PLATFORM_EMPTY
    return html


def get_available_capacity():
    """–°—á–∏—Ç–∞–µ—Ç –æ–±—â—É—é —Å–≤–æ–±–æ–¥–Ω—É—é –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –≤–∞–≥–æ–Ω–æ–≤."""
    total_capacity = 0
    total_load = 0
    for i in range(1, 6):
        if st.session_state[f"wagon_{i}_is_purchased"]:
            # –ë–µ—Ä–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏–∑ WAGON_INFO
            total_capacity += WAGON_INFO[i]["capacity"]
            total_load += len(st.session_state[f"wagon_{i}_contents"])
    return total_capacity - total_load


def check_capacity_for_contract(contract):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ö–≤–∞—Ç–∏—Ç –ª–∏ –º–µ—Å—Ç–∞ –≤ –°–û–í–ú–ï–°–¢–ò–ú–´–• –≤–∞–≥–æ–Ω–∞—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞,
    –∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞–¥–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥ —Å–∏–º—É–ª—è—Ü–∏–∏.
    """
    goods_to_load = []
    for g, q in [(contract["goods_1"], contract["qty_1"]), (contract["goods_2"], contract["qty_2"]),
                 (contract["goods_3"], contract["qty_3"])]:
        if g and q:
            goods_to_load.extend([g] * q)

    available_space = {i: WAGON_INFO[i]["capacity"] - len(st.session_state[f"wagon_{i}_contents"])
                       for i in range(1, 6) if st.session_state[f"wagon_{i}_is_purchased"]}

    gondola_type = {i: st.session_state[f"wagon_{i}_contents"][0]['good']
                    for i in available_space if
                    WAGON_INFO[i]["type"] == "gondola" and st.session_state[f"wagon_{i}_contents"]}

    for good in goods_to_load:
        found_slot = False
        compatible_wagon_type = GOOD_COMPATIBILITY[good]

        for i in sorted(available_space.keys()):
            # –°–ê–ú–ê–Ø –ì–õ–ê–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –¢–∏–ø –≤–∞–≥–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—É
            if WAGON_INFO[i]["type"] == compatible_wagon_type and available_space[i] > 0:
                if compatible_wagon_type == "gondola":
                    if i in gondola_type and gondola_type[i] != good:
                        continue
                    if i not in gondola_type:
                        gondola_type[i] = good

                available_space[i] -= 1
                found_slot = True
                break

        if not found_slot:
            return False
    return True


def load_contract(contract):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ –°–û–í–ú–ï–°–¢–ò–ú–´–ï –≤–∞–≥–æ–Ω—ã, —Å–æ–±–ª—é–¥–∞—è –ø—Ä–∞–≤–∏–ª–∞."""
    goods_to_load = []
    for g, q in [(contract["goods_1"], contract["qty_1"]), (contract["goods_2"], contract["qty_2"]),
                 (contract["goods_3"], contract["qty_3"])]:
        if g and q:
            goods_to_load.extend([{"good": g, "contract_id": contract['id']}] * q)

    for good_item in goods_to_load:
        compatible_wagon_type = GOOD_COMPATIBILITY[good_item['good']]

        for i in range(1, 6):
            if not st.session_state[f"wagon_{i}_is_purchased"]:
                continue

            # –°–ê–ú–ê–Ø –ì–õ–ê–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –¢–∏–ø –≤–∞–≥–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—É
            if WAGON_INFO[i]["type"] == compatible_wagon_type:
                contents_key = f"wagon_{i}_contents"
                wagon_capacity = WAGON_INFO[i]["capacity"]

                if len(st.session_state[contents_key]) < wagon_capacity:
                    if compatible_wagon_type == "gondola" and st.session_state[contents_key]:
                        if st.session_state[contents_key][0]['good'] != good_item['good']:
                            continue

                    st.session_state[contents_key].append(good_item)
                    break


def unload_contract(contract):
    """–í—ã–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏–∑ –≤—Å–µ—Ö –≤–∞–≥–æ–Ω–æ–≤."""
    for i in range(1, 6):
        if st.session_state[f"wagon_{i}_is_purchased"]:
            contents_key = f"wagon_{i}_contents"
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ø–∏—Å–æ–∫, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã –æ—Ç –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
            st.session_state[contents_key] = [item for item in st.session_state[contents_key] if
                                              item['contract_id'] != contract['id']]


# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–û–°–¢–û–Ø–ù–ò–Ø ---
if "round" not in st.session_state:
    st.session_state.round = 1
    st.session_state.time = 10
    st.session_state.money = 0
    st.session_state.credit = 0
    st.session_state.station = "A"
    st.session_state.loco_hp = 3

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–≥–æ–Ω–æ–≤
    for i in range(1, 6):
        st.session_state[f"wagon_{i}_is_purchased"] = i <= 2  # –ü–µ—Ä–≤—ã–µ –¥–≤–∞ –∫—É–ø–ª–µ–Ω—ã
        st.session_state[f"wagon_{i}_hp"] = 3 if i <= 2 else 0
        st.session_state[f"wagon_{i}_contents"] = []

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
    st.session_state.contracts_pool = deepcopy(CONTRACTS)
    st.session_state.active_contracts = []
    st.session_state.completed_contracts = []

    st.session_state.moves_made_this_round = 0

# --- –û—Ç—Ä–∏—Å–æ–≤–∫–∞ UI ---
# st.set_page_config(layout="wide")
st.title("–ñ–µ–ª–µ–∑–Ω—ã–µ –¥–æ—Ä–æ–≥–∏ –†–æ—Å—Å–∏–∏")

cols = st.columns(4)
cols[0].markdown(f"**–†–∞—É–Ω–¥:** {st.session_state.round}")
cols[1].markdown(f"**–í—Ä–µ–º—è:** {st.session_state.time}")
cols[2].markdown(f"**–î–µ–Ω—å–≥–∏:** {st.session_state.money} ‚ÇΩ")
cols[3].markdown(f"**–ö—Ä–µ–¥–∏—Ç:** {st.session_state.credit} ‚ÇΩ")
st.write(f"**–°—Ç–∞–Ω—Ü–∏—è:** {st.session_state.station}")
st.markdown("---")

# --- –¢–∞–±–ª–∏—Ü–∞ "–°–æ—Å—Ç–∞–≤ –ø–æ–µ–∑–¥–∞" ---
header_cols = st.columns([2, 1, 3, 2])
header_cols[0].markdown("**–°–æ—Å—Ç–∞–≤**")
header_cols[1].markdown("**–ó–¥–æ—Ä–æ–≤—å–µ**")
header_cols[2].markdown("**–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å**")
header_cols[3].markdown("**–î–µ–π—Å—Ç–≤–∏–µ**")

# –õ–æ–∫–æ–º–æ—Ç–∏–≤
loco_cols = st.columns([2, 1, 3, 2])
loco_cols[0].markdown("–õ–æ–∫–æ–º–æ—Ç–∏–≤")
loco_cols[1].markdown(
    f'<span style="color:red; font-size:20px;">{"‚ô•" * st.session_state.loco_hp}</span><span style="color:lightgrey; font-size:20px;">{"‚ô•" * (3 - st.session_state.loco_hp)}</span>',
    unsafe_allow_html=True)
if st.session_state.loco_hp < 3:
    if loco_cols[3].button(f"–†–µ–º–æ–Ω—Ç ({REPAIR_LOCO}‚ÇΩ)", key="repair_loco"):
        if st.session_state.money >= REPAIR_LOCO:
            st.session_state.money -= REPAIR_LOCO
            st.session_state.loco_hp = 3
            st.rerun()
        else:
            st.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!")
st.markdown("<hr style='margin:0.2rem 0'>", unsafe_allow_html=True)

# –í–∞–≥–æ–Ω—ã –≤ —Ü–∏–∫–ª–µ
for i in range(1, 6):
    is_purchased_key = f"wagon_{i}_is_purchased"
    hp_key = f"wagon_{i}_hp"
    contents_key = f"wagon_{i}_contents"
    row_cols = st.columns([2, 1, 3, 2])
    if st.session_state[is_purchased_key]:
        wagon_capacity = WAGON_INFO[i]["capacity"]
        if WAGON_INFO[i]['type'] != 'platform':
            fill_html = get_wagon_fill_html(st.session_state[contents_key], wagon_capacity)
        else:
            fill_html = get_platform_fill_html(st.session_state[contents_key], wagon_capacity)
        row_cols[0].markdown(WAGON_INFO[i]["name"])
        row_cols[1].markdown(
            f'<span style="color:red; font-size:20px;">{"‚ô•" * st.session_state[hp_key]}</span><span style="color:lightgrey; font-size:20px;">{"‚ô•" * (3 - st.session_state[hp_key])}</span>',
            unsafe_allow_html=True)
        row_cols[2].markdown(fill_html, unsafe_allow_html=True)
        if st.session_state[hp_key] < 3:
            if row_cols[3].button(f"–†–µ–º–æ–Ω—Ç ({REPAIR_WAGON}‚ÇΩ)", key=f"repair_wagon_{i}"):
                if st.session_state.money >= REPAIR_WAGON:
                    st.session_state.money -= REPAIR_WAGON;
                    st.session_state[hp_key] = 3;
                    st.rerun()
                else:
                    st.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!")
    else:
        row_cols[0].markdown(f"<span style='color:grey;'>{WAGON_INFO[i]['name']}</span>", unsafe_allow_html=True)
        row_cols[1].markdown("<span style='color:grey;'>-</span>", unsafe_allow_html=True)
        row_cols[2].markdown("<span style='color:grey;'>–ù–µ –∫—É–ø–ª–µ–Ω</span>", unsafe_allow_html=True)
        if row_cols[3].button(f"–ö—É–ø–∏—Ç—å ({WAGON_PRICES[i]}‚ÇΩ)", key=f"buy_wagon_{i}"):
            if st.session_state.money >= WAGON_PRICES[i]:
                st.session_state.money -= WAGON_PRICES[i];
                st.session_state[is_purchased_key] = True;
                st.session_state[
                    hp_key] = 3;
                st.rerun()
            else:
                st.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!")
    st.markdown("<hr style='margin:0.1rem 0'>", unsafe_allow_html=True)

st.markdown("---")

# --- –ë–ª–æ–∫ –≤–∑—è—Ç–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ ---
st.subheader("–í–∑—è—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç")
if len(st.session_state.active_contracts) >= 4:
    st.warning("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –±–æ–ª—å—à–µ 4 –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.")
else:
    contract_cols = st.columns(3)
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    simple_contracts = [c for c in st.session_state.contracts_pool if c['id'].startswith('P')]
    medium_contracts = [c for c in st.session_state.contracts_pool if c['id'].startswith('M')]
    hard_contracts = [c for c in st.session_state.contracts_pool if c['id'].startswith('S')]


    def take_contract(contract_list):
        if contract_list:
            chosen_contract = random.choice(contract_list)
            chosen_contract['is_loaded'] = False  # –ù–æ–≤—ã–π —Ñ–ª–∞–≥ —Å—Ç–∞—Ç—É—Å–∞
            chosen_contract['rounds_left'] = chosen_contract['max_rounds']
            st.session_state.active_contracts.append(chosen_contract)
            st.session_state.contracts_pool.remove(chosen_contract)
            st.rerun()


    with contract_cols[0]:
        if st.button(f"–ü—Ä–æ—Å—Ç–æ–π ({len(simple_contracts)} —à—Ç.)", disabled=not simple_contracts):
            take_contract(simple_contracts)
    with contract_cols[1]:
        if st.button(f"–°—Ä–µ–¥–Ω–∏–π ({len(medium_contracts)} —à—Ç.)", disabled=not medium_contracts):
            take_contract(medium_contracts)
    with contract_cols[2]:
        if st.button(f"–°–ª–æ–∂–Ω—ã–π ({len(hard_contracts)} —à—Ç.)", disabled=not hard_contracts):
            take_contract(hard_contracts)

st.markdown("---")

# --- –¢–∞–±–ª–∏—Ü–∞ "–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã" ---
st.subheader("–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã")
if not st.session_state.active_contracts:
    st.info("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤.")
else:
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    act_header = st.columns([1, 2, 3, 1, 2])
    act_header[0].markdown("**ID**")
    act_header[1].markdown("**–ú–∞—Ä—à—Ä—É—Ç**")
    act_header[2].markdown("**–¢–æ–≤–∞—Ä—ã**")
    act_header[3].markdown("**–°—Ä–æ–∫**")
    act_header[4].markdown("**–î–µ–π—Å—Ç–≤–∏–µ**")

    # –ö–æ–ø–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
    for contract in st.session_state.active_contracts[:]:
        act_cols = st.columns([1, 2, 3, 1, 2])
        goods_str = f"{contract['goods_1']}√ó{contract['qty_1']}"
        if contract['goods_2']: goods_str += f", {contract['goods_2']}√ó{contract['qty_2']}"
        if contract['goods_3']: goods_str += f", {contract['goods_3']}√ó{contract['qty_3']}"

        status_color = "lightgreen" if contract.get('is_loaded') else "orange"

        act_cols[0].markdown(f"**{contract['id']}**")
        act_cols[1].markdown(
            f"{contract['origin']} ‚Üí {contract['destination']} <span style='color:{status_color};'>‚óè</span>",
            unsafe_allow_html=True)
        act_cols[2].markdown(f"{goods_str} ({contract_price(contract)}‚ÇΩ)")
        act_cols[3].markdown(f"{contract['rounds_left']}")

        with act_cols[4]:
            # –õ–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–æ–∫ –ü–æ–≥—Ä—É–∑–∫–∞/–†–∞–∑–≥—Ä—É–∑–∫–∞
            if not contract['is_loaded'] and st.session_state.station == contract['origin']:
                if st.button("–ü–æ–≥—Ä—É–∑–∫–∞", key=f"load_{contract['id']}"):
                    if check_capacity_for_contract(contract):
                        load_contract(contract)
                        contract['is_loaded'] = True
                        st.session_state.time = max(0, st.session_state.time - 1)
                        st.rerun()
                    else:
                        st.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –≤ –≤–∞–≥–æ–Ω–∞—Ö!")

            if contract['is_loaded'] and st.session_state.station == contract['destination']:
                if st.button("–†–∞–∑–≥—Ä—É–∑–∫–∞", key=f"unload_{contract['id']}"):
                    unload_contract(contract)
                    st.session_state.money += contract_price(contract)
                    st.session_state.completed_contracts.append(contract)
                    st.session_state.active_contracts.remove(contract)
                    st.session_state.time = max(0, st.session_state.time - 1)
                    st.rerun()
        st.markdown("<hr style='margin:0.2rem 0'>", unsafe_allow_html=True)

st.markdown("---")
# --- –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∏–≥—Ä–µ ---
st.subheader("–î–µ–π—Å—Ç–≤–∏—è")
main_action_cols = st.columns(3)
if main_action_cols[0].button("–î–≤–∏–≥–∞—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç–∞–Ω—Ü–∏—é", disabled=(st.session_state.moves_made_this_round >= 2)):
    st.session_state.station = "A" if st.session_state.station == "B" else "B"
    st.session_state.time = max(0, st.session_state.time - 2)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ
    st.session_state.moves_made_this_round += 1

    st.rerun()

if main_action_cols[1].button("–í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç (3000‚ÇΩ, –≤–µ—Ä–Ω—É—Ç—å 4000‚ÇΩ)"):
    if st.session_state.credit == 0:
        st.session_state.money += CREDIT_GIVE
        st.session_state.credit = CREDIT_GIVE
        # –¢—É—Ç –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    else:
        st.warning("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫—Ä–µ–¥–∏—Ç.")

if main_action_cols[2].button("–ö–æ–Ω–µ—Ü —Ä–∞—É–Ω–¥–∞ (—Å–ª–µ–¥—É—é—â–∏–π)"):
    st.session_state.round += 1
    st.session_state.time = 10
    st.session_state.moves_made_this_round = 0
    # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–æ–∫–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
    for c in st.session_state.active_contracts:
        c['rounds_left'] -= 1
    # –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–ª–æ–º–∫–∞ –ª–æ–∫–æ–º–æ—Ç–∏–≤–∞
    if random.randint(1, 6) == 1 and st.session_state.loco_hp > 0:
        st.session_state.loco_hp -= 1
    st.rerun()
