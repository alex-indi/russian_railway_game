import random

import streamlit as st

from config import *

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
GOODS_PRICES = {
    "–£–≥–æ–ª—å": G_COAL,
    "–©–µ–±–µ–Ω—å": G_GRAVEL,
    "–ñ–µ–ª—Ç—ã–π": G_BOX_Y,
    "–ó–µ–ª–µ–Ω—ã–π": G_BOX_G,
    "–°–∏–Ω–∏–π": G_BOX_B,
    "–ú–µ—Ç–∞–ª–ª": G_METAL,
}


def contract_price(contract):
    s = 0
    for g, q in [
        (contract["goods_1"], contract["qty_1"]),
        (contract["goods_2"], contract["qty_2"]),
        (contract["goods_3"], contract["qty_3"])
    ]:
        if g and q:
            s += GOODS_PRICES[g] * q
    return s


def wagon_capacity(hp, cap3, cap2, cap1):
    if hp == 3:
        return cap3
    elif hp == 2:
        return cap2
    elif hp == 1:
        return cap1
    else:
        return 0


# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
if "round" not in st.session_state:
    st.session_state.round = 1
    st.session_state.time = 10
    st.session_state.money = 0
    st.session_state.credit = 0
    st.session_state.credit_due = 0
    st.session_state.station = "A"
    st.session_state.loco_hp = 3
    st.session_state.wagon_1_is_purchased = True
    st.session_state.wagon_1_hp = 3
    st.session_state.wagon_2_is_purchased = True
    st.session_state.wagon_2_hp = 3
    st.session_state.wagon_3_is_purchased = False
    st.session_state.wagon_3_hp = 0
    st.session_state.wagon_4_is_purchased = False
    st.session_state.wagon_4_hp = 0
    st.session_state.wagon_5_is_purchased = False
    st.session_state.wagon_5_hp = 0
    st.session_state.active_contracts = []
    st.session_state.completed_contracts = []
    st.session_state.selected_contract = None
    st.session_state.contracts_pool = list(CONTRACTS)

for i in range(1, 6):
    key = f"wagon_{i}_contents"
    if key not in st.session_state:
        st.session_state[key] = []
if "platform_contents" not in st.session_state:
    st.session_state.platform_contents = []

# --- –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–µ–∑–¥–∞ ---
st.title("–ñ–µ–ª–µ–∑–Ω—ã–µ –¥–æ—Ä–æ–≥–∏ –†–æ—Å—Å–∏–∏")

cols = st.columns(4)
cols[0].markdown(f"**–†–∞—É–Ω–¥:** {st.session_state.round}")
cols[1].markdown(f"**–í—Ä–µ–º—è:** {st.session_state.time}")
cols[2].markdown(f"**–î–µ–Ω—å–≥–∏:** {st.session_state.money}")
cols[3].markdown(f"**–ö—Ä–µ–¥–∏—Ç:** {st.session_state.credit}")

st.write(f"**–°—Ç–∞–Ω—Ü–∏—è:** {st.session_state.station}")

# st.markdown(f"**–õ–æ–∫–æ–º–æ—Ç–∏–≤:** {'‚ô• ' * st.session_state.loco_hp}{'‚ñ°' * (3 - st.session_state.loco_hp)}")
# st.markdown(f"**–ü–æ–ª—É–≤–∞–≥–æ–Ω:** {'‚ô• ' * st.session_state.wagon_hp}{'‚ñ°' * (3 - st.session_state.wagon_hp)}")
# st.markdown(f"**–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä:** {'‚ô• ' * st.session_state.boxcar_hp}{'‚ñ°' * (3 - st.session_state.boxcar_hp)}")
# if st.session_state.have_platform:
#     st.markdown(f"**–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:** {'‚ô•' * st.session_state.platform_hp}{'‚ñ°' * (3 - st.session_state.platform_hp)}")
# else:
#     st.markdown("*–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–µ –∫—É–ø–ª–µ–Ω–∞*")

# –ö–∞—Ä—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –¥–ª—è HTML (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ SVG –∏–ª–∏ —ç–º–æ–¥–∑–∏)
GOODS_HTML = {
    "–£–≥–æ–ª—å": '<span style="font-size:20px;">‚¨õ</span>',
    "–©–µ–±–µ–Ω—å": '<span style="font-size:20px; color:#888;">‚¨ú</span>',
    "–ñ–µ–ª—Ç—ã–π": '<span style="font-size:20px; color:#FFD700;">üü®</span>',
    "–ó–µ–ª–µ–Ω—ã–π": '<span style="font-size:20px; color:#228B22;">üü©</span>',
    "–°–∏–Ω–∏–π": '<span style="font-size:20px; color:#0066FF;">üü¶</span>',
    "–ú–µ—Ç–∞–ª–ª": '<span style="font-size:20px; color:#bbb;">‚¨ú</span>',
    None: '<span style="font-size:20px; color:#ccc;">‚ñ´Ô∏è</span>',
}

PLATFORM_EMPTY = '<span style="font-size:20px; color:#aaa;">‚ö™</span>'
PLATFORM_FULL = '<span style="font-size:20px; color:#000;">‚ö´</span>'


def get_wagon_fill_html(contents, hp):
    html = ''
    for i in range(hp):
        if i < len(contents):
            html += GOODS_HTML.get(contents[i], GOODS_HTML[None])
        else:
            html += GOODS_HTML[None]
    return html


def get_platform_fill_html(contents, hp):
    html = ''
    for i in range(hp):
        if i < len(contents):
            html += PLATFORM_FULL
        else:
            html += PLATFORM_EMPTY
    return html


rows = []

# –õ–æ–∫–æ–º–æ—Ç–∏–≤
rows.append(f"""
<tr>
    <td>–õ–æ–∫–æ–º–æ—Ç–∏–≤</td>
    <td><span style="color:red; font-size:20px;">{"‚ô•" * st.session_state.loco_hp}{"‚ñ° " * (3 - st.session_state.loco_hp)}</span></td>
    <td></td>
</tr>
""")

# –ü–æ–ª—É–≤–∞–≥–æ–Ω 1
if st.session_state.wagon_1_is_purchased:
    rows.append(f"""
<tr>
    <td>–ü–æ–ª—É–≤–∞–≥–æ–Ω 1</td>
    <td><span style="color:red; font-size:20px;">{"‚ô•" * st.session_state.wagon_1_hp}{"‚ñ°" * (3 - st.session_state.wagon_1_hp)}</span></td>
    <td>{get_wagon_fill_html(st.session_state.wagon_1_contents, st.session_state.wagon_1_hp)}</td>
</tr>
    """)

# –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 1
if st.session_state.wagon_2_is_purchased:
    rows.append(f"""
<tr>
    <td>–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 1</td>
    <td><span style="color:red; font-size:20px;">{"‚ô•" * st.session_state.wagon_2_hp}{"‚ñ°" * (3 - st.session_state.wagon_2_hp)}</span></td>
    <td>{get_wagon_fill_html(st.session_state.wagon_2_contents, st.session_state.wagon_2_hp)}</td>
</tr>
    """)

# –ü–æ–ª—É–≤–∞–≥–æ–Ω 2
if st.session_state.wagon_3_is_purchased:
    rows.append(f"""
<tr>
    <td>–ü–æ–ª—É–≤–∞–≥–æ–Ω 2</td>
    <td><span style="color:red; font-size:20px;">{"‚ô•" * st.session_state.wagon_3_hp}{"‚ñ°" * (3 - st.session_state.wagon_3_hp)}</span></td>
    <td>{get_wagon_fill_html(st.session_state.wagon_3_contents, st.session_state.wagon_3_hp)}</td>
</tr>
    """)

# –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 2
if st.session_state.wagon_4_is_purchased:
    rows.append(f"""
<tr>
    <td>–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 2</td>
    <td><span style="color:red; font-size:20px;">{"‚ô•" * st.session_state.wagon_4_hp}{"‚ñ°" * (3 - st.session_state.wagon_4_hp)}</span></td>
    <td>{get_wagon_fill_html(st.session_state.wagon_4_contents, st.session_state.wagon_4_hp)}</td>
</tr>
    """)

# –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞
if st.session_state.wagon_5_is_purchased:
    rows.append(f"""
<tr>
    <td>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞</td>
    <td><span style="color:red; font-size:20px;">{"‚ô•" * st.session_state.platform_hp}{"‚ñ°" * (3 - st.session_state.platform_hp)}</span></td>
    <td>{get_platform_fill_html(st.session_state.platform_contents, st.session_state.platform_hp)}</td>
</tr>""")

# –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π HTML
table_html = f"""
<table style="width:100%; border-collapse: collapse;">
<tr>
    <th style="text-align:left;">–°–æ—Å—Ç–∞–≤</th>
    <th style="text-align:left;">–ó–¥–æ—Ä–æ–≤—å–µ</th>
    <th style="text-align:left;">–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å</th>
</tr>
{''.join(rows)}
</table>
"""
st.markdown(table_html, unsafe_allow_html=True)

# --- –ë–ª–æ–∫ —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ ---
st.subheader("–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã (–≤—ã–±—Ä–∞—Ç—å –∏ –≤–∑—è—Ç—å –¥–æ 4 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)")
available = [c for c in st.session_state.contracts_pool if
             c not in st.session_state.active_contracts and c not in st.session_state.completed_contracts]
contract_options = [
    f"{c['id']}: {c['goods_1']}√ó{c['qty_1']}" + (f", {c['goods_2']}√ó{c['qty_2']}" if c['goods_2'] else "") + (
        f", {c['goods_3']}√ó{c['qty_3']}" if c['goods_3'] else "") + f" ({contract_price(c)}‚ÇΩ)" for c in available]
contract_idx = st.selectbox("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã", range(len(available)), format_func=lambda i: contract_options[i],
                            key="contract_choice")

if st.button("–í–∑—è—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç"):
    if len(st.session_state.active_contracts) < 4:
        st.session_state.active_contracts.append(available[contract_idx])
        st.session_state.contracts_pool.remove(available[contract_idx])

# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ ---
st.subheader("–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã")
if st.session_state.active_contracts:
    for i, c in enumerate(st.session_state.active_contracts):
        st.markdown(f"**{c['id']}** | {c['origin']}‚Üí{c['destination']} | "
                    f"{c['goods_1']}√ó{c['qty_1']}"
                    + (f", {c['goods_2']}√ó{c['qty_2']}" if c['goods_2'] else "")
                    + (f", {c['goods_3']}√ó{c['qty_3']}" if c['goods_3'] else "")
                    + f" | –û—Å—Ç–∞–ª–æ—Å—å —Ä–∞—É–Ω–¥–æ–≤: {c.get('rounds_left', c['max_rounds'])} | –°—É–º–º–∞: {contract_price(c)}‚ÇΩ")

        if st.button(f"–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç {c['id']}", key=f"done_{i}"):
            st.session_state.completed_contracts.append(c)
            st.session_state.active_contracts.remove(c)
            st.session_state.money += contract_price(c)

# --- –î–µ–π—Å—Ç–≤–∏—è –ø–æ –ø–æ–µ–∑–¥—É –∏ –∏–≥—Ä–µ ---
st.subheader("–î–µ–π—Å—Ç–≤–∏—è")

cols = st.columns(3)
if cols[0].button("–î–≤–∏–≥–∞—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç–∞–Ω—Ü–∏—é"):
    st.session_state.station = "A" if st.session_state.station == "B" else "B"
    st.session_state.time = max(0, st.session_state.time - 2)  # 2 –µ–¥. –≤—Ä–µ–º–µ–Ω–∏

if cols[1].button("–ü–æ–≥—Ä—É–∑–∫–∞/—Ä–∞–∑–≥—Ä—É–∑–∫–∞"):
    st.session_state.time = max(0, st.session_state.time - 1)  # 1 –µ–¥. –≤—Ä–µ–º–µ–Ω–∏

if cols[2].button("–ß–∏–Ω–∏—Ç—å –ª–æ–∫–æ–º–æ—Ç–∏–≤"):
    if st.session_state.money >= REPAIR_LOCO and st.session_state.loco_hp < 3:
        st.session_state.money -= REPAIR_LOCO
        st.session_state.loco_hp = 3

st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–≥–æ–Ω–∞–º–∏")
wcol = st.columns(3)
if wcol[0].button("–ß–∏–Ω–∏—Ç—å –ø–æ–ª—É–≤–∞–≥–æ–Ω"):
    if st.session_state.money >= REPAIR_WAGON and st.session_state.wagon_hp < 3:
        st.session_state.money -= REPAIR_WAGON
        st.session_state.wagon_hp = 3
if wcol[1].button("–ß–∏–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"):
    if st.session_state.money >= REPAIR_WAGON and st.session_state.boxcar_hp < 3:
        st.session_state.money -= REPAIR_WAGON
        st.session_state.boxcar_hp = 3
if wcol[2].button("–ö—É–ø–∏—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É (5000‚ÇΩ)"):
    if not st.session_state.have_platform and st.session_state.money >= 5000:
        st.session_state.money -= 5000
        st.session_state.have_platform = True
        st.session_state.platform_hp = 3

# --- –í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç ---
if st.button("–í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç (3000‚ÇΩ, –≤–µ—Ä–Ω—É—Ç—å 4000‚ÇΩ)"):
    if st.session_state.credit == 0:
        st.session_state.money += CREDIT_GIVE
        st.session_state.credit = CREDIT_GIVE
        st.session_state.credit_due = CREDIT_PAY

# --- –ö–æ–Ω–µ—Ü —Ä–∞—É–Ω–¥–∞ ---
if st.button("–ö–æ–Ω–µ—Ü —Ä–∞—É–Ω–¥–∞ (—Å–ª–µ–¥—É—é—â–∏–π)"):
    st.session_state.round += 1
    st.session_state.time = 10
    # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–æ–∫–æ–≤
    for c in st.session_state.active_contracts:
        c['rounds_left'] = c.get('rounds_left', c['max_rounds']) - 1
        # –û–±–µ—Å—Ü–µ–Ω–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ —Å—Ä–æ–∫–∞
        if c['rounds_left'] < 0:
            c['depreciation'] = c.get('depreciation', 1) * 0.5

    # –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–ª–æ–º–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 1/6 —à–∞–Ω—Å) –¥–ª—è –ª–æ–∫–æ–º–æ—Ç–∏–≤–∞
    if random.randint(1, 6) == 1:
        st.session_state.loco_hp = max(0, st.session_state.loco_hp - 1)

    # –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º –æ–±–µ—Å—Ü–µ–Ω–∏–≤–∞–Ω–∏—è
    for c in st.session_state.active_contracts:
        if 'depreciation' in c:
            old_price = contract_price(c)
            new_price = int(old_price * c['depreciation'])
            c['price'] = new_price

st.write("**–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã:**")
for c in st.session_state.completed_contracts:
    st.write(f"{c['id']} ({contract_price(c)}‚ÇΩ)")

st.info(
    "*–ë–∞–∑–æ–≤–∞—è –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è. –î–ª—è —É—Å–ª–æ–∂–Ω–µ–Ω–∏—è ‚Äî –¥–æ–±–∞–≤—å—Ç–µ —Å–æ–±—ã—Ç–∏—è, —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∞–≥–æ–Ω–æ–≤, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ HP, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é —à—Ç—Ä–∞—Ñ–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–æ–∫.*")
